// Code generated by protoc-gen-go. DO NOT EDIT.
// source: NetProtocol_v1.proto

package bgNetMessage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgControlInfoV1MainType int32

const (
	MsgControlInfoV1_SyncMappingTable MsgControlInfoV1MainType = 0
)

var MsgControlInfoV1MainType_name = map[int32]string{
	0: "SyncMappingTable",
}

var MsgControlInfoV1MainType_value = map[string]int32{
	"SyncMappingTable": 0,
}

func (x MsgControlInfoV1MainType) String() string {
	return proto.EnumName(MsgControlInfoV1MainType_name, int32(x))
}

func (MsgControlInfoV1MainType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a2388728c9278da1, []int{1, 0}
}

type MsgControlInfoV1SubType int32

const (
	MsgControlInfoV1_ADD       MsgControlInfoV1SubType = 0
	MsgControlInfoV1_REMOVE    MsgControlInfoV1SubType = 1
	MsgControlInfoV1_QUERY     MsgControlInfoV1SubType = 2
	MsgControlInfoV1_UPDATE    MsgControlInfoV1SubType = 3
	MsgControlInfoV1_UPDATEALL MsgControlInfoV1SubType = 4
)

var MsgControlInfoV1SubType_name = map[int32]string{
	0: "ADD",
	1: "REMOVE",
	2: "QUERY",
	3: "UPDATE",
	4: "UPDATEALL",
}

var MsgControlInfoV1SubType_value = map[string]int32{
	"ADD":       0,
	"REMOVE":    1,
	"QUERY":     2,
	"UPDATE":    3,
	"UPDATEALL": 4,
}

func (x MsgControlInfoV1SubType) String() string {
	return proto.EnumName(MsgControlInfoV1SubType_name, int32(x))
}

func (MsgControlInfoV1SubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a2388728c9278da1, []int{1, 1}
}

type NetMessageV2_NetMessageType int32

const (
	NetMessageV2_ControlType NetMessageV2_NetMessageType = 0
	NetMessageV2_DataType    NetMessageV2_NetMessageType = 1
)

var NetMessageV2_NetMessageType_name = map[int32]string{
	0: "ControlType",
	1: "DataType",
}

var NetMessageV2_NetMessageType_value = map[string]int32{
	"ControlType": 0,
	"DataType":    1,
}

func (x NetMessageV2_NetMessageType) String() string {
	return proto.EnumName(NetMessageV2_NetMessageType_name, int32(x))
}

func (NetMessageV2_NetMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a2388728c9278da1, []int{3, 0}
}

// 映射信息
type MsgMappingInfoV1 struct {
	// 映射ID
	MappingId int32 `protobuf:"varint,1,opt,name=Mapping_id,json=MappingId,proto3" json:"Mapping_id,omitempty"`
	// 映射地址
	MappingIp string `protobuf:"bytes,2,opt,name=Mapping_ip,json=MappingIp,proto3" json:"Mapping_ip,omitempty"`
	// 映射端口
	MappingPort int32 `protobuf:"varint,3,opt,name=Mapping_port,json=MappingPort,proto3" json:"Mapping_port,omitempty"`
	// 目标地址
	SourceIp string `protobuf:"bytes,4,opt,name=Source_ip,json=SourceIp,proto3" json:"Source_ip,omitempty"`
	// 目标端口
	SourcePort int32 `protobuf:"varint,5,opt,name=Source_port,json=SourcePort,proto3" json:"Source_port,omitempty"`
	// 映射网络类型
	NetType string `protobuf:"bytes,6,opt,name=Net_type,json=NetType,proto3" json:"Net_type,omitempty"`
	// (可选)映射是否运行
	IsRunning            int32    `protobuf:"varint,7,opt,name=Is_running,json=IsRunning,proto3" json:"Is_running,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgMappingInfoV1) Reset()         { *m = MsgMappingInfoV1{} }
func (m *MsgMappingInfoV1) String() string { return proto.CompactTextString(m) }
func (*MsgMappingInfoV1) ProtoMessage()    {}
func (*MsgMappingInfoV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2388728c9278da1, []int{0}
}

func (m *MsgMappingInfoV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgMappingInfoV1.Unmarshal(m, b)
}
func (m *MsgMappingInfoV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgMappingInfoV1.Marshal(b, m, deterministic)
}
func (m *MsgMappingInfoV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMappingInfoV1.Merge(m, src)
}
func (m *MsgMappingInfoV1) XXX_Size() int {
	return xxx_messageInfo_MsgMappingInfoV1.Size(m)
}
func (m *MsgMappingInfoV1) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMappingInfoV1.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMappingInfoV1 proto.InternalMessageInfo

func (m *MsgMappingInfoV1) GetMappingId() int32 {
	if m != nil {
		return m.MappingId
	}
	return 0
}

func (m *MsgMappingInfoV1) GetMappingIp() string {
	if m != nil {
		return m.MappingIp
	}
	return ""
}

func (m *MsgMappingInfoV1) GetMappingPort() int32 {
	if m != nil {
		return m.MappingPort
	}
	return 0
}

func (m *MsgMappingInfoV1) GetSourceIp() string {
	if m != nil {
		return m.SourceIp
	}
	return ""
}

func (m *MsgMappingInfoV1) GetSourcePort() int32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *MsgMappingInfoV1) GetNetType() string {
	if m != nil {
		return m.NetType
	}
	return ""
}

func (m *MsgMappingInfoV1) GetIsRunning() int32 {
	if m != nil {
		return m.IsRunning
	}
	return 0
}

// 控制信息
type MsgControlInfoV1 struct {
	// 主控类型
	MainType MsgControlInfoV1MainType `protobuf:"varint,1,opt,name=MainType,proto3,enum=bgNetMessage.MsgControlInfoV1MainType" json:"MainType,omitempty"`
	// 子控类型
	SubType MsgControlInfoV1SubType `protobuf:"varint,2,opt,name=SubType,proto3,enum=bgNetMessage.MsgControlInfoV1SubType" json:"SubType,omitempty"`
	// 控制命令
	CtrlCommand          string   `protobuf:"bytes,3,opt,name=CtrlCommand,proto3" json:"CtrlCommand,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgControlInfoV1) Reset()         { *m = MsgControlInfoV1{} }
func (m *MsgControlInfoV1) String() string { return proto.CompactTextString(m) }
func (*MsgControlInfoV1) ProtoMessage()    {}
func (*MsgControlInfoV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2388728c9278da1, []int{1}
}

func (m *MsgControlInfoV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgControlInfoV1.Unmarshal(m, b)
}
func (m *MsgControlInfoV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgControlInfoV1.Marshal(b, m, deterministic)
}
func (m *MsgControlInfoV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgControlInfoV1.Merge(m, src)
}
func (m *MsgControlInfoV1) XXX_Size() int {
	return xxx_messageInfo_MsgControlInfoV1.Size(m)
}
func (m *MsgControlInfoV1) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgControlInfoV1.DiscardUnknown(m)
}

var xxx_messageInfo_MsgControlInfoV1 proto.InternalMessageInfo

func (m *MsgControlInfoV1) GetMainType() MsgControlInfoV1MainType {
	if m != nil {
		return m.MainType
	}
	return MsgControlInfoV1_SyncMappingTable
}

func (m *MsgControlInfoV1) GetSubType() MsgControlInfoV1SubType {
	if m != nil {
		return m.SubType
	}
	return MsgControlInfoV1_ADD
}

func (m *MsgControlInfoV1) GetCtrlCommand() string {
	if m != nil {
		return m.CtrlCommand
	}
	return ""
}

type NetMessageV1 struct {
	// 消息类型，控制类型-0，数据类型-1
	MsgType int32 `protobuf:"varint,1,opt,name=MsgType,proto3" json:"MsgType,omitempty"`
	// 映射ID
	MappingId int32 `protobuf:"varint,2,opt,name=MappingId,proto3" json:"MappingId,omitempty"`
	// 实际上就是客户端接入的ClientSocket(IP:PORT)
	ClientId string `protobuf:"bytes,3,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	// 消息实体，我们这里不动它
	MessageBody          string   `protobuf:"bytes,4,opt,name=MessageBody,proto3" json:"MessageBody,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetMessageV1) Reset()         { *m = NetMessageV1{} }
func (m *NetMessageV1) String() string { return proto.CompactTextString(m) }
func (*NetMessageV1) ProtoMessage()    {}
func (*NetMessageV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2388728c9278da1, []int{2}
}

func (m *NetMessageV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetMessageV1.Unmarshal(m, b)
}
func (m *NetMessageV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetMessageV1.Marshal(b, m, deterministic)
}
func (m *NetMessageV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetMessageV1.Merge(m, src)
}
func (m *NetMessageV1) XXX_Size() int {
	return xxx_messageInfo_NetMessageV1.Size(m)
}
func (m *NetMessageV1) XXX_DiscardUnknown() {
	xxx_messageInfo_NetMessageV1.DiscardUnknown(m)
}

var xxx_messageInfo_NetMessageV1 proto.InternalMessageInfo

func (m *NetMessageV1) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *NetMessageV1) GetMappingId() int32 {
	if m != nil {
		return m.MappingId
	}
	return 0
}

func (m *NetMessageV1) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *NetMessageV1) GetMessageBody() string {
	if m != nil {
		return m.MessageBody
	}
	return ""
}

type NetMessageV2 struct {
	// 消息类型，控制类型-0，数据类型-1
	MsgType NetMessageV2_NetMessageType `protobuf:"varint,1,opt,name=MsgType,proto3,enum=bgNetMessage.NetMessageV2_NetMessageType" json:"MsgType,omitempty"`
	// 映射ID
	MappingId int32 `protobuf:"varint,2,opt,name=MappingId,proto3" json:"MappingId,omitempty"`
	// 实际上就是客户端接入的ClientSocket(IP:PORT)
	ClientId string `protobuf:"bytes,3,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	// 消息实体，我们这里不动它
	MessageBody          string   `protobuf:"bytes,4,opt,name=MessageBody,proto3" json:"MessageBody,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetMessageV2) Reset()         { *m = NetMessageV2{} }
func (m *NetMessageV2) String() string { return proto.CompactTextString(m) }
func (*NetMessageV2) ProtoMessage()    {}
func (*NetMessageV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2388728c9278da1, []int{3}
}

func (m *NetMessageV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetMessageV2.Unmarshal(m, b)
}
func (m *NetMessageV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetMessageV2.Marshal(b, m, deterministic)
}
func (m *NetMessageV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetMessageV2.Merge(m, src)
}
func (m *NetMessageV2) XXX_Size() int {
	return xxx_messageInfo_NetMessageV2.Size(m)
}
func (m *NetMessageV2) XXX_DiscardUnknown() {
	xxx_messageInfo_NetMessageV2.DiscardUnknown(m)
}

var xxx_messageInfo_NetMessageV2 proto.InternalMessageInfo

func (m *NetMessageV2) GetMsgType() NetMessageV2_NetMessageType {
	if m != nil {
		return m.MsgType
	}
	return NetMessageV2_ControlType
}

func (m *NetMessageV2) GetMappingId() int32 {
	if m != nil {
		return m.MappingId
	}
	return 0
}

func (m *NetMessageV2) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *NetMessageV2) GetMessageBody() string {
	if m != nil {
		return m.MessageBody
	}
	return ""
}

func init() {
	proto.RegisterEnum("bgNetMessage.MsgControlInfoV1MainType", MsgControlInfoV1MainType_name, MsgControlInfoV1MainType_value)
	proto.RegisterEnum("bgNetMessage.MsgControlInfoV1SubType", MsgControlInfoV1SubType_name, MsgControlInfoV1SubType_value)
	proto.RegisterEnum("bgNetMessage.NetMessageV2_NetMessageType", NetMessageV2_NetMessageType_name, NetMessageV2_NetMessageType_value)
	proto.RegisterType((*MsgMappingInfoV1)(nil), "bgNetMessage.MsgMappingInfo_v1")
	proto.RegisterType((*MsgControlInfoV1)(nil), "bgNetMessage.MsgControlInfo_v1")
	proto.RegisterType((*NetMessageV1)(nil), "bgNetMessage.NetMessage_v1")
	proto.RegisterType((*NetMessageV2)(nil), "bgNetMessage.NetMessage_v2")
}

func init() { proto.RegisterFile("NetProtocol_v1.proto", fileDescriptor_a2388728c9278da1) }

var fileDescriptor_a2388728c9278da1 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xcd, 0xae, 0x9a, 0x40,
	0x14, 0x16, 0xbd, 0x0a, 0x1c, 0xbd, 0x96, 0x9e, 0xdc, 0x05, 0xfd, 0x4b, 0x2d, 0x9b, 0x9a, 0x2e,
	0x6c, 0xae, 0x7d, 0x02, 0x2b, 0x2e, 0x48, 0x2e, 0xd6, 0xa2, 0xb7, 0x49, 0x57, 0x04, 0x75, 0x4a,
	0x48, 0x70, 0x66, 0x02, 0xa3, 0x89, 0x0f, 0xd0, 0x57, 0xe9, 0x83, 0x75, 0xdd, 0x87, 0x68, 0x18,
	0x06, 0x85, 0x76, 0xd1, 0x5d, 0x77, 0x73, 0xbe, 0x73, 0xbe, 0x6f, 0xce, 0xf7, 0x31, 0xc0, 0xdd,
	0x92, 0x88, 0x55, 0xc6, 0x04, 0xdb, 0xb1, 0x34, 0x3c, 0xdd, 0x4f, 0x78, 0x71, 0xc6, 0xc1, 0x36,
	0x5e, 0x12, 0xe1, 0x93, 0x3c, 0x8f, 0x62, 0xe2, 0xfc, 0xd2, 0xe0, 0xa9, 0x9f, 0xc7, 0x7e, 0xc4,
	0x79, 0x42, 0x63, 0x8f, 0x7e, 0x63, 0xe1, 0xe9, 0x1e, 0x5f, 0x01, 0x28, 0x24, 0x4c, 0xf6, 0xb6,
	0x36, 0xd2, 0xc6, 0xdd, 0xc0, 0xac, 0x66, 0xf6, 0x8d, 0x36, 0xb7, 0xdb, 0x23, 0x6d, 0x6c, 0x5e,
	0xdb, 0x1c, 0xdf, 0xc0, 0xa0, 0x6a, 0x73, 0x96, 0x09, 0xbb, 0x23, 0xf9, 0x7d, 0x85, 0xad, 0x58,
	0x26, 0xf0, 0x05, 0x98, 0x6b, 0x76, 0xcc, 0x76, 0xa4, 0x10, 0xb8, 0x91, 0x02, 0x46, 0x09, 0x78,
	0x1c, 0x5f, 0x43, 0x5f, 0x35, 0x25, 0xbd, 0x2b, 0xe9, 0x50, 0x42, 0x92, 0xfd, 0x0c, 0x8c, 0x25,
	0x11, 0xa1, 0x38, 0x73, 0x62, 0xf7, 0x24, 0x59, 0x5f, 0x12, 0xb1, 0x39, 0x73, 0x52, 0xac, 0xe6,
	0xe5, 0x61, 0x76, 0xa4, 0x34, 0xa1, 0xb1, 0xad, 0x97, 0x9b, 0x7b, 0x79, 0x50, 0x02, 0xce, 0x8f,
	0xb6, 0xb4, 0x3b, 0x67, 0x54, 0x64, 0x2c, 0xad, 0xec, 0xba, 0x60, 0xf8, 0x51, 0x42, 0x0b, 0x01,
	0x69, 0x76, 0x38, 0x1d, 0x4f, 0xea, 0x29, 0x4d, 0xfe, 0xa2, 0x4c, 0x0e, 0x6a, 0x3e, 0xb8, 0x30,
	0x71, 0x06, 0xfa, 0xfa, 0xb8, 0x95, 0x22, 0x6d, 0x29, 0xf2, 0xf6, 0x5f, 0x22, 0x79, 0x39, 0x1e,
	0x54, 0x3c, 0x1c, 0x41, 0x7f, 0x2e, 0xb2, 0x74, 0xce, 0x0e, 0x87, 0x88, 0xee, 0x65, 0x70, 0x66,
	0x50, 0x87, 0x9c, 0x11, 0x18, 0xd5, 0xd5, 0x78, 0x07, 0xd6, 0xfa, 0x4c, 0x77, 0x2a, 0xd7, 0x4d,
	0xb4, 0x4d, 0x89, 0xd5, 0x72, 0x5c, 0xd0, 0x95, 0x2e, 0xea, 0xd0, 0x99, 0xb9, 0xae, 0xd5, 0x42,
	0x80, 0x5e, 0xb0, 0xf0, 0x3f, 0x7d, 0x59, 0x58, 0x1a, 0x9a, 0xd0, 0xfd, 0xfc, 0xb8, 0x08, 0xbe,
	0x5a, 0xed, 0x02, 0x7e, 0x5c, 0xb9, 0xb3, 0xcd, 0xc2, 0xea, 0xe0, 0x2d, 0x98, 0xe5, 0x79, 0xf6,
	0xf0, 0x60, 0xdd, 0x38, 0xdf, 0x35, 0xb8, 0xbd, 0xee, 0x5e, 0x84, 0x64, 0x83, 0xee, 0xe7, 0xf1,
	0x25, 0xa3, 0x6e, 0x50, 0x95, 0xf8, 0x12, 0xae, 0x6f, 0x43, 0x5a, 0x6f, 0x3c, 0x96, 0xe7, 0x60,
	0xcc, 0xd3, 0x84, 0x50, 0xe1, 0x55, 0x86, 0x2e, 0x75, 0xe1, 0x57, 0xdd, 0xf0, 0x91, 0xed, 0xcf,
	0xea, 0x21, 0xd4, 0x21, 0xe7, 0xe7, 0x1f, 0x7b, 0x4c, 0xd1, 0x6d, 0xee, 0x31, 0x9c, 0xbe, 0x6b,
	0xc6, 0xdc, 0x98, 0xae, 0x55, 0x65, 0xd2, 0xff, 0x63, 0xe7, 0xf7, 0x30, 0x6c, 0x5e, 0x8b, 0x4f,
	0xa0, 0xaf, 0x3e, 0x7d, 0x51, 0x5a, 0x2d, 0x1c, 0x80, 0xe1, 0x46, 0x22, 0x92, 0x95, 0xb6, 0xed,
	0xc9, 0x3f, 0xf3, 0xc3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x57, 0x6e, 0x14, 0xb1, 0x03,
	0x00, 0x00,
}
